name: Compile and Release Qt6 Proyect

on: push

env:
  QT_VERSION:     "6.2.0"
  MINGW_VERSION:  "win64_mingw81"
  MINGW_PATH:     "mingw81_64"
  BUILD_TYPE:      Release

jobs:
  build:
    runs-on: windows-latest
    steps:
    -
      uses: actions/checkout@v2
#    -
#      name: Check mingw g++ version
#      run: |
#        Write-Output (Get-Command g++.exe).Path
#        g++.exe --version
    -
      name: Install correct version of mingw
      uses: crazy-max/ghaction-chocolatey@v1
      with:
        args: install mingw -y
#    -
#      name: Check mingw directory
#      run: |
#        ls C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin
    
#     name: Install Qt
#     uses: jurplel/install-qt-action@v2
#     with:
#       host: windows
#       target: "desktop"
#       version: ${{ env.QT_VERSION }}
#       arch: ${{ env.MINGW_VERSION }}
#       dir: "${{github.workspace}}/qt"
#       install-deps: "true"

    -
      name: Install Qt
      # You may pin to the exact commit or the version.
      # uses: jurplel/install-qt-action@2d518188e746defd451af981c3c901f463d99e29
      uses: jurplel/install-qt-action@v3.2.1
      with:
        # Directory to install Qt
        dir: "${{github.workspace}}/qt"
        # Version of Qt to install
        version: ${{ env.QT_VERSION }}
        # Host platform
        host: windows
        # Target platform for build
        target: "desktop"
        # Architecture for Windows/Android
        arch: ${{ env.MINGW_VERSION }}
        # Whether or not to install Qt dependencies on Linux
        install-deps: "true"
#   -
#     name: Set Qt path and refresh
#     run: |
#       echo "${{github.workspace}}/qt/Qt/${{ env.QT_VERSION }}/${{ env.MINGW_PATH }}/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
#       refreshenv
#       #Write-Output (Get-Command g++.exe).Path
#       #g++.exe --version
#    -
#      name: Check availability of libraries
#      run: |
#        ls ${{github.workspace}}/qt/Qt/${{ env.QT_VERSION }}/${{ env.MINGW_PATH }}/lib/
#    -
#      name: Check availability of binaries
#      run: |
#        ls ${{github.workspace}}/qt/Qt/${{ env.QT_VERSION }}/${{ env.MINGW_PATH }}/bin/
#    -
#      name: Prepend path
#      run: echo ":${{github.workspace}}/qt/Qt/${{ env.QT_VERSION }}/mingw73_32/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
#    -
#      name: Check QMake, CMake and make
#      run: |
#        Write-Output (Get-Command qmake.exe).Path
#        qmake.exe -version
#        Write-Output (Get-Command cmake.exe).Path
#        cmake.exe -version
#        Write-Output (Get-Command mingw32-make.exe).Path
#        mingw32-make.exe -version  
    -
      name: Configure QMake Project
      working-directory: ${{github.workspace}}
      env:
        CMAKE_PREFIX_PATH: ${{env.Qt5_Dir}}
      run: qmake ${{github.workspace}}/toynote.pro -spec win32-g++ -o ${{github.workspace}}/build "CONFIG+=qtquickcompiler" 
      #cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G "CodeBlocks - MinGW Makefiles" -B ${{github.workspace}}/build
    -
      name: Check paths
      run: |
        ls ${{github.workspace}}/build
    -
      name: Build project
      working-directory: ${{github.workspace}}
      run: |
        mingw32-make.exe -f ${{github.workspace}}/build/Makefile qmake_all
    -
      name: Compress portable program
      run: |
        mkdir ${{github.workspace}}\build\all\
        cp ${{github.workspace}}/build/RePr.exe ${{github.workspace}}\build\all\
        cd ${{github.workspace}}\build\all\
        windeployqt.exe RePr.exe --release
        ls
        Compress-Archive -Path ${{github.workspace}}\build\all\ -DestinationPath ${{github.workspace}}\build\final.zip
    -
      name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: ${{github.workspace}}/build/final.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
